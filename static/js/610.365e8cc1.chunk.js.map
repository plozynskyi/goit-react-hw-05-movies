{"version":3,"file":"static/js/610.365e8cc1.chunk.js","mappings":"iSAEMA,EAAcC,EAAAA,EAAAA,GAAH,6JASXC,EAAWD,EAAAA,EAAAA,GAAH,wHAORE,EAAeF,EAAAA,EAAAA,EAAH,sFAMZG,EAAcH,EAAAA,EAAAA,IAAH,+G,SCfXI,EAAW,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAKlB,OACE,SAACN,EAAD,UACGM,EAAUC,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,KAAMC,EAAlB,EAAkBA,aAAlB,OACb,UAACR,EAAD,YACE,SAACE,EAAD,CACEO,IACED,EAAY,UARP,wCAQO,OAAiBA,GATvC,4EAWQE,IAAKH,EACLI,MAAM,WAER,SAACV,EAAD,UAAeM,MARFD,EADF,KAcpB,EAED,IAEAH,EAASS,aAAe,CACtBR,UAAW,IC5Bb,IAsCA,EAtC4B,WAC1B,OAAkCS,EAAAA,EAAAA,UAAS,IAA3C,eAAOT,EAAP,KAAkBU,EAAlB,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KACA,GAAkCL,EAAAA,EAAAA,WAAS,GAA3C,eAAOM,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAsBR,OApBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,wGAEdR,GAAa,GAFC,UAGSS,EAAAA,EAAAA,IAAmBJ,GAH5B,iBAGNK,EAHM,EAGNA,MACEC,QACRP,GAAa,GAEfN,EAAaY,GAPC,kDAQLE,EARK,KAQLA,SACTV,EAASU,EAASC,KAAKC,SACvBC,QAAQC,IAAIJ,EAASC,KAAKC,SAVZ,yBAYdd,GAAa,GAZC,6EAAH,qDAgBfQ,GACD,GAAE,CAACH,KAGF,gCACGN,IAAa,SAACkB,EAAA,EAAD,IACbhB,IAAS,yEACTE,IAAa,+EAEZA,IAAa,SAAC,EAAD,CAAUf,UAAWA,MAGzC,C,8CC3BD,IAde,WACb,OACE,SAAC,KAAD,CACE8B,OAAQ,CAAC,UAAW,UAAW,WAC/BC,aAAc,CACZC,SAAU,QACVC,IAAK,MACLC,KAAM,MACNC,UAAW,0BAIlB,C,wLCZKC,E,QAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAiB,mCAAG,WAAMC,GAAN,yFACRN,EAASO,IAAI,qBAAsB,CACxDJ,OAAQ,CACNG,KAAAA,KAH2B,uBACvBjB,EADuB,EACvBA,KADuB,kBAMxBA,GANwB,2CAAH,sDASjBmB,EAAY,mCAAG,WAAMC,GAAN,yFACHT,EAASO,IAAT,iBAAuBE,GAAM,CAAC,GAD3B,uBAClBpB,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZJ,EAAkB,mCAAG,WAAMwB,GAAN,yFACTT,EAASO,IAAT,iBAAuBE,EAAvB,aADS,uBACxBpB,EADwB,EACxBA,KADwB,kBAEzBA,GAFyB,2CAAH,sDAKlBqB,EAAqB,mCAAG,WAAMD,GAAN,yFACZT,EAASO,IAAT,iBAAuBE,EAAvB,aADY,uBAC3BpB,EAD2B,EAC3BA,KAD2B,kBAE5BA,GAF4B,2CAAH,sDAKrBsB,EAAc,mCAAG,WAAOC,EAAON,GAAd,yFACLN,EAASO,IAAT,iBAA+B,CACpDJ,OAAQ,CACNS,MAAAA,EACAN,KAAAA,KAJwB,uBACpBjB,EADoB,EACpBA,KADoB,kBAOrBA,GAPqB,2CAAH,uD","sources":["components/CastList/cast-list.styled.jsx","components/CastList/CastList.jsx","pages/SingleMovieCastPage/SingleMovieCastPage.jsx","shared/Loader/Loader.jsx","shared/services/movies-api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nconst CastListBox = styled.ul`\n  display: flex;\n  flex-direction: row;\n  gap: 10px;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  align-items: stretch;\n`;\n\nconst CastItem = styled.li`\n  list-style: none;\n  /* border: 2px solid coral; */\n  border-radius: 15px;\n  width: 120px;\n`;\n\nconst CastItemName = styled.p`\n  height: 37px;\n  font-weight: bold;\n  text-align: center;\n`;\n\nconst ProfilePath = styled.img`\n  display: flex;\n  align-items: center;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport { CastListBox, CastItem, CastItemName, ProfilePath };\n","import PropTypes from 'prop-types';\n\nimport {\n  CastListBox,\n  CastItem,\n  CastItemName,\n  ProfilePath,\n} from './cast-list.styled';\n\nconst CastList = ({ castMovie }) => {\n  const profileDefaultPath =\n    'https://cdn.pixabay.com/photo/2017/01/10/03/54/avatar-1968236_960_720.png';\n  const imageUrl = 'https://image.tmdb.org/t/p/original/';\n\n  return (\n    <CastListBox>\n      {castMovie.map(({ cast_id, name, profile_path }) => (\n        <CastItem key={cast_id}>\n          <ProfilePath\n            src={\n              profile_path ? `${imageUrl}${profile_path}` : profileDefaultPath\n            }\n            alt={name}\n            width=\"100px\"\n          />\n          <CastItemName>{name}</CastItemName>\n        </CastItem>\n      ))}\n    </CastListBox>\n  );\n};\n\nexport default CastList;\n\nCastList.defaultProps = {\n  castMovie: [],\n};\n\nCastList.propTypes = {\n  castMovie: PropTypes.arrayOf(\n    PropTypes.shape({\n      cast_id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      profile_path: PropTypes.string,\n    })\n  ),\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport Loader from 'shared/Loader/Loader';\nimport { getMovieByNameCast } from 'shared/services/movies-api';\nimport CastList from '../../components/CastList/CastList';\n\nconst SingleMovieCastPage = () => {\n  const [castMovie, setCastMovie] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [noResults, setNoResults] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        setIsLoading(true);\n        const { cast } = await getMovieByNameCast(movieId);\n        if (!cast.length) {\n          setNoResults(true);\n        }\n        setCastMovie(cast);\n      } catch ({ response }) {\n        setError(response.data.message);\n        console.log(response.data.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <p>Oops. Something goes wrong. Please try again.</p>}\n      {noResults && <p>There is no information about cast for this movie.</p>}\n\n      {!noResults && <CastList castMovie={castMovie} />}\n    </>\n  );\n};\n\nexport default SingleMovieCastPage;\n","import { RotatingTriangles } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <RotatingTriangles\n      colors={['#51E5FF', '#7DE2D1', '#FF7E6B']}\n      wrapperStyle={{\n        position: 'fixed',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n      }}\n    />\n  );\n};\n\nexport default Loader;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'e6316174af6222f390b70a86dd33c4fc',\n  },\n});\n\nexport const getTrendingMovies = async page => {\n  const { data } = await instance.get('/trending/all/week', {\n    params: {\n      page,\n    },\n  });\n  return data;\n};\n\nexport const getMovieById = async id => {\n  const { data } = await instance.get(`/movie/${id}`, {});\n  return data;\n};\n\nexport const getMovieByNameCast = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  return data;\n};\n\nexport const getMovieByNameReviews = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data;\n};\n\nexport const getMovieByName = async (query, page) => {\n  const { data } = await instance.get(`/search/movie?`, {\n    params: {\n      query,\n      page,\n    },\n  });\n  return data;\n};\n"],"names":["CastListBox","styled","CastItem","CastItemName","ProfilePath","CastList","castMovie","map","cast_id","name","profile_path","src","alt","width","defaultProps","useState","setCastMovie","isLoading","setIsLoading","error","setError","noResults","setNoResults","movieId","useParams","useEffect","fetchCast","getMovieByNameCast","cast","length","response","data","message","console","log","Loader","colors","wrapperStyle","position","top","left","transform","instance","axios","baseURL","params","api_key","getTrendingMovies","page","get","getMovieById","id","getMovieByNameReviews","getMovieByName","query"],"sourceRoot":""}