{"version":3,"file":"static/js/363.42be7c9e.chunk.js","mappings":"yOAsDA,UAhD4B,WAC1B,OAAkCA,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAAkCN,EAAAA,EAAAA,WAAS,GAA3C,eAAOO,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,kHAESC,EAAAA,EAAAA,IAAmBJ,GAF5B,gBAENK,EAFM,EAENA,KACRC,QAAQC,IAAIF,GACPA,EAAKG,QACRT,GAAa,GAEfN,EAAaY,GAPC,kDAQLI,EARK,KAQLA,SACTZ,EAASY,EAASC,KAAKC,SACvBL,QAAQC,IAAIE,EAASC,KAAKC,SAVZ,yBAYdhB,GAAa,GAZC,6EAAH,qDAgBfQ,GACD,GAAE,CAACH,IAEJ,IAAMY,EAAWpB,EAAUqB,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,KAAMC,EAAlB,EAAkBA,aAAlB,OAC7B,2BACE,kCAAUD,EAAV,QACA,gBACEE,IAAG,8CAAyCD,GAC5CE,IAAKH,EACLI,MAAM,YALDL,EADoB,IAW/B,OACE,gCACGpB,IAAa,SAAC,IAAD,IACbE,IAAS,yEACTE,IAAa,+EACZA,IAAa,wBAAKc,MAGzB,C,8CC9CD,IAJe,WACb,OAAO,SAAC,KAAD,GACR,C,wLCFKQ,E,QAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAiB,mCAAG,sGACRL,EAASM,IAAI,qBAAsB,CAAC,GAD5B,uBACvBhB,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,qDAKjBiB,EAAY,mCAAG,WAAMC,GAAN,yFACHR,EAASM,IAAT,iBAAuBE,GAAM,CAAC,GAD3B,uBAClBlB,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZN,EAAkB,mCAAG,WAAMwB,GAAN,yFACTR,EAASM,IAAT,iBAAuBE,EAAvB,aADS,uBACxBlB,EADwB,EACxBA,KADwB,kBAEzBA,GAFyB,2CAAH,sDAKlBmB,EAAqB,mCAAG,WAAMD,GAAN,yFACZR,EAASM,IAAT,iBAAuBE,EAAvB,aADY,uBAC3BlB,EAD2B,EAC3BA,KAD2B,kBAE5BA,GAF4B,2CAAH,sDAKrBoB,EAAc,mCAAG,WAAMC,GAAN,yFACLX,EAASM,IAAT,8BAAoCK,GAAS,CAAC,GADzC,uBACpBrB,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,qD","sources":["pages/SingleMovieCastPage/SingleMovieCastPage.jsx","shared/Loader/Loader.jsx","shared/services/movies-api.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport Loader from 'shared/Loader/Loader';\nimport { getMovieByNameCast } from 'shared/services/movies-api';\n\nconst SingleMovieCastPage = () => {\n  const [castMovie, setCastMovie] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [noResults, setNoResults] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const { cast } = await getMovieByNameCast(movieId);\n        console.log(cast);\n        if (!cast.length) {\n          setNoResults(true);\n        }\n        setCastMovie(cast);\n      } catch ({ response }) {\n        setError(response.data.message);\n        console.log(response.data.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchCast();\n  }, [movieId]);\n\n  const elements = castMovie.map(({ cast_id, name, profile_path }) => (\n    <li key={cast_id}>\n      <p>Name: {name}.</p>\n      <img\n        src={`https://image.tmdb.org/t/p/original/${profile_path}`}\n        alt={name}\n        width=\"100px\"\n      />\n    </li>\n  ));\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <p>Oops. Something goes wrong. Please try again.</p>}\n      {noResults && <p>There is no information about cast for this movie.</p>}\n      {!noResults && <ul>{elements}</ul>}\n    </>\n  );\n};\n\nexport default SingleMovieCastPage;\n","import { RotatingTriangles } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return <RotatingTriangles />;\n};\n\nexport default Loader;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'e6316174af6222f390b70a86dd33c4fc',\n  },\n});\n\nexport const getTrendingMovies = async () => {\n  const { data } = await instance.get('/trending/all/week', {});\n  return data;\n};\n\nexport const getMovieById = async id => {\n  const { data } = await instance.get(`/movie/${id}`, {});\n  return data;\n};\n\nexport const getMovieByNameCast = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  return data;\n};\n\nexport const getMovieByNameReviews = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data;\n};\n\nexport const getMovieByName = async query => {\n  const { data } = await instance.get(`/search/movie?query=${query}`, {});\n  return data;\n};\n"],"names":["useState","castMovie","setCastMovie","isLoading","setIsLoading","error","setError","noResults","setNoResults","movieId","useParams","useEffect","fetchCast","getMovieByNameCast","cast","console","log","length","response","data","message","elements","map","cast_id","name","profile_path","src","alt","width","instance","axios","baseURL","params","api_key","getTrendingMovies","get","getMovieById","id","getMovieByNameReviews","getMovieByName","query"],"sourceRoot":""}