{"version":3,"file":"static/js/680.11895608.chunk.js","mappings":"gOAEMA,EAAaC,EAAAA,EAAAA,GAAH,2C,SCkBhB,EAhBuB,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,KAAMC,EAAS,EAATA,GAC/BC,GAAWC,EAAAA,EAAAA,MAEXC,EACJF,EAASG,WAAaC,EAAAA,EAAAA,KAAcA,EAAAA,EAAAA,OAAgBJ,EAASG,SAC/D,OACE,+BACE,SAACR,EAAD,WACE,SAAC,KAAD,CAAMU,GAAE,UAAKH,EAAL,YAAoBH,GAAMO,MAAO,CAAEC,KAAMP,GAAjD,SACGH,GAASC,OAKnB,EChBKU,EAAaZ,EAAAA,EAAAA,GAAH,+DCIVa,EAAiB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACxB,OACE,SAACF,EAAD,UACGE,EAAOC,KAAI,gBAAGZ,EAAH,EAAGA,GAAIF,EAAP,EAAOA,MAAOC,EAAd,EAAcA,KAAd,OACV,SAAC,EAAD,CAAyBD,MAAOA,EAAOC,KAAMA,EAAMC,GAAIA,GAAlCA,EADX,KAKjB,EAED,IAEAU,EAAeG,aAAe,CAC5BF,OAAQ,G,wHC4BV,UAxCiB,WACf,OAA4BG,EAAAA,EAAAA,YAA5B,eAAOH,EAAP,KAAeI,EAAf,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KACA,GAAkCL,EAAAA,EAAAA,WAAS,GAA3C,eAAOM,EAAP,KAAkBC,EAAlB,KAsBA,OApBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,wGAEdN,GAAa,GAFC,UAGYO,EAAAA,EAAAA,MAHZ,iBAGNC,EAHM,EAGNA,UAENJ,GAAa,GAEfN,EAAUU,GAPI,kDAQLC,EARK,KAQLA,SACTP,EAASO,EAASC,KAAKC,SACvBC,QAAQC,IAAIJ,EAASC,KAAKC,SAVZ,yBAYdX,GAAa,GAZC,6EAAH,qDAefM,GAED,GAAE,KAGD,gCACGP,IAAa,SAAC,IAAD,IACbE,IAAS,gFACTE,IACC,mGAIAA,IAAa,SAAC,IAAD,CAAgBT,OAAQA,MAG5C,C,8CCvCD,IAJe,WACb,OAAO,SAAC,KAAD,GACR,C,wLCFKoB,E,QAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIAX,EAAiB,mCAAG,sGACRO,EAASK,IAAI,qBAAsB,CAAC,GAD5B,uBACvBT,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,qDAKjBU,EAAY,mCAAG,WAAMrC,GAAN,yFACH+B,EAASK,IAAT,iBAAuBpC,GAAM,CAAC,GAD3B,uBAClB2B,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZW,EAAkB,mCAAG,WAAMtC,GAAN,yFACT+B,EAASK,IAAT,iBAAuBpC,EAAvB,aADS,uBACxB2B,EADwB,EACxBA,KADwB,kBAEzBA,GAFyB,2CAAH,sDAKlBY,EAAqB,mCAAG,WAAMvC,GAAN,yFACZ+B,EAASK,IAAT,iBAAuBpC,EAAvB,aADY,uBAC3B2B,EAD2B,EAC3BA,KAD2B,kBAE5BA,GAF4B,2CAAH,sDAKrBa,EAAc,mCAAG,WAAMC,GAAN,yFACLV,EAASK,IAAT,8BAAoCK,GAAS,CAAC,GADzC,uBACpBd,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,qD","sources":["components/HomeMoviesItem/home-movie-item.styled.jsx","components/HomeMoviesItem/HomeMoviesItem.jsx","components/HomeMoviesList/home-movies.styled.jsx","components/HomeMoviesList/HomeMoviesList.jsx","pages/HomePage/HomePage.jsx","shared/Loader/Loader.jsx","shared/services/movies-api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nconst MoviesItem = styled.li`\n  padding: 5px 0;\n`;\n\nexport { MoviesItem };\n","import { Link, useLocation } from 'react-router-dom';\nimport { routes } from '../../routes';\nimport { MoviesItem } from './home-movie-item.styled';\n\nconst HomeMoviesItem = ({ title, name, id }) => {\n  const location = useLocation();\n\n  const currentPage =\n    location.pathname === routes.HOME ? routes.MOVIES : location.pathname;\n  return (\n    <>\n      <MoviesItem>\n        <Link to={`${currentPage}/${id}`} state={{ from: location }}>\n          {title || name}\n        </Link>\n      </MoviesItem>\n    </>\n  );\n};\n\nexport default HomeMoviesItem;\n","import styled from '@emotion/styled';\n\nconst HomeMovies = styled.ul`\n  margin-top: 0;\n  margin-bottom: 0;\n`;\nexport { HomeMovies };\n","// import PropTypes from 'prop-types';\n\nimport HomeMoviesItem from 'components/HomeMoviesItem/HomeMoviesItem';\n\nimport { HomeMovies } from './home-movies.styled';\n\nconst HomeMoviesList = ({ movies }) => {\n  return (\n    <HomeMovies>\n      {movies.map(({ id, title, name }) => (\n        <HomeMoviesItem key={id} title={title} name={name} id={id} />\n      ))}\n    </HomeMovies>\n  );\n};\n\nexport default HomeMoviesList;\n\nHomeMoviesList.defaultProps = {\n  movies: [],\n};\n\nHomeMoviesList.propTypes = {};\n","import { useState, useEffect } from 'react';\n\nimport Loader from 'shared/Loader/Loader';\nimport HomeMoviesList from 'components/HomeMoviesList/HomeMoviesList';\n\nimport { getTrendingMovies } from 'shared/services/movies-api';\n\nconst HomePage = () => {\n  const [movies, setMovies] = useState();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [noResults, setNoResults] = useState(false);\n\n  useEffect(() => {\n    const fetchPost = async () => {\n      try {\n        setIsLoading(true);\n        const { results } = await getTrendingMovies();\n        if (!results) {\n          setNoResults(true);\n        }\n        setMovies(results);\n      } catch ({ response }) {\n        setError(response.data.message);\n        console.log(response.data.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchPost();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <p>Oops. Something goes wrong. Please try refresh page.</p>}\n      {noResults && (\n        <p>\n          There is no information about trending movie. Please try refresh page.\n        </p>\n      )}\n      {!noResults && <HomeMoviesList movies={movies} />}\n    </>\n  );\n};\n\nexport default HomePage;\n","import { RotatingTriangles } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return <RotatingTriangles />;\n};\n\nexport default Loader;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'e6316174af6222f390b70a86dd33c4fc',\n  },\n});\n\nexport const getTrendingMovies = async () => {\n  const { data } = await instance.get('/trending/all/week', {});\n  return data;\n};\n\nexport const getMovieById = async id => {\n  const { data } = await instance.get(`/movie/${id}`, {});\n  return data;\n};\n\nexport const getMovieByNameCast = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  return data;\n};\n\nexport const getMovieByNameReviews = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data;\n};\n\nexport const getMovieByName = async query => {\n  const { data } = await instance.get(`/search/movie?query=${query}`, {});\n  return data;\n};\n"],"names":["MoviesItem","styled","title","name","id","location","useLocation","currentPage","pathname","routes","to","state","from","HomeMovies","HomeMoviesList","movies","map","defaultProps","useState","setMovies","isLoading","setIsLoading","error","setError","noResults","setNoResults","useEffect","fetchPost","getTrendingMovies","results","response","data","message","console","log","instance","axios","baseURL","params","api_key","get","getMovieById","getMovieByNameCast","getMovieByNameReviews","getMovieByName","query"],"sourceRoot":""}