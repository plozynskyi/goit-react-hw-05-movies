{"version":3,"file":"static/js/669.305b26d6.chunk.js","mappings":"yOAoDA,UA9C8B,WAC5B,OAAiCA,EAAAA,EAAAA,UAAS,IAA1C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAAkCN,EAAAA,EAAAA,WAAS,GAA3C,eAAOO,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,kHAEYC,EAAAA,EAAAA,IAAsBJ,GAFlC,gBAENK,EAFM,EAENA,QACRC,QAAQC,IAAIF,GACPA,EAAQG,QACXT,GAAa,GAEfN,EAAUY,GAPI,kDAQLI,EARK,KAQLA,SACTZ,EAASY,EAASC,KAAKC,SACvBL,QAAQC,IAAIE,EAASC,KAAKC,SAVZ,yBAYdhB,GAAa,GAZC,6EAAH,qDAgBfQ,GACD,GAAE,CAACH,IACJM,QAAQC,IAAIf,GACZ,IAAMoB,EAAWpB,EAAYqB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OAC/B,yBACE,2BACE,wBAAKD,KACL,uBAAIC,MAFGF,IAFoB,IASjC,OACE,gCACGpB,IAAa,SAAC,IAAD,IACbE,IAAS,yEACTE,IAAa,iFACZA,IAAa,wBAAKc,MAGzB,C,8CC5CD,IAJe,WACb,OAAO,SAAC,KAAD,GACR,C,wLCFKK,E,QAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAiB,mCAAG,sGACRL,EAASM,IAAI,qBAAsB,CAAC,GAD5B,uBACvBb,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,qDAKjBc,EAAY,mCAAG,WAAMV,GAAN,yFACHG,EAASM,IAAT,iBAAuBT,GAAM,CAAC,GAD3B,uBAClBJ,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZe,EAAkB,mCAAG,WAAMX,GAAN,yFACTG,EAASM,IAAT,iBAAuBT,EAAvB,aADS,uBACxBJ,EADwB,EACxBA,KADwB,kBAEzBA,GAFyB,2CAAH,sDAKlBN,EAAqB,mCAAG,WAAMU,GAAN,yFACZG,EAASM,IAAT,iBAAuBT,EAAvB,aADY,uBAC3BJ,EAD2B,EAC3BA,KAD2B,kBAE5BA,GAF4B,2CAAH,sDAKrBgB,EAAc,mCAAG,WAAMC,GAAN,yFACLV,EAASM,IAAT,8BAAoCI,GAAS,CAAC,GADzC,uBACpBjB,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,qD","sources":["pages/SingleMovieReviewPage/SingleMovieReviewPage.jsx","shared/Loader/Loader.jsx","shared/services/movies-api.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport Loader from 'shared/Loader/Loader';\nimport { getMovieByNameReviews } from 'shared/services/movies-api';\n\nconst SingleMovieReviewPage = () => {\n  const [reviewMovie, setReview] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [noResults, setNoResults] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const { results } = await getMovieByNameReviews(movieId);\n        console.log(results);\n        if (!results.length) {\n          setNoResults(true);\n        }\n        setReview(results);\n      } catch ({ response }) {\n        setError(response.data.message);\n        console.log(response.data.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchCast();\n  }, [movieId]);\n  console.log(reviewMovie);\n  const elements = reviewMovie.map(({ id, author, content }) => (\n    <ul>\n      <li key={id}>\n        <h1>{author}</h1>\n        <p>{content}</p>\n      </li>\n    </ul>\n  ));\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <p>Oops. Something goes wrong. Please try again.</p>}\n      {noResults && <p>There is no information about review for this movie.</p>}\n      {!noResults && <ul>{elements}</ul>}\n    </>\n  );\n};\n\nexport default SingleMovieReviewPage;\n","import { RotatingTriangles } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return <RotatingTriangles />;\n};\n\nexport default Loader;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'e6316174af6222f390b70a86dd33c4fc',\n  },\n});\n\nexport const getTrendingMovies = async () => {\n  const { data } = await instance.get('/trending/all/week', {});\n  return data;\n};\n\nexport const getMovieById = async id => {\n  const { data } = await instance.get(`/movie/${id}`, {});\n  return data;\n};\n\nexport const getMovieByNameCast = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  return data;\n};\n\nexport const getMovieByNameReviews = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data;\n};\n\nexport const getMovieByName = async query => {\n  const { data } = await instance.get(`/search/movie?query=${query}`, {});\n  return data;\n};\n"],"names":["useState","reviewMovie","setReview","isLoading","setIsLoading","error","setError","noResults","setNoResults","movieId","useParams","useEffect","fetchCast","getMovieByNameReviews","results","console","log","length","response","data","message","elements","map","id","author","content","instance","axios","baseURL","params","api_key","getTrendingMovies","get","getMovieById","getMovieByNameCast","getMovieByName","query"],"sourceRoot":""}