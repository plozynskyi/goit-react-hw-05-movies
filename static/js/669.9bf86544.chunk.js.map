{"version":3,"file":"static/js/669.9bf86544.chunk.js","mappings":"yOAiDA,UA3C8B,WAC5B,OAAiCA,EAAAA,EAAAA,UAAS,IAA1C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAAkCN,EAAAA,EAAAA,WAAS,GAA3C,eAAOO,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,wGAEdR,GAAa,GAFC,UAGYS,EAAAA,EAAAA,IAAsBJ,GAHlC,iBAGNK,EAHM,EAGNA,SACKC,QACXP,GAAa,GAEfN,EAAUY,GAPI,kDAQLE,EARK,KAQLA,SACTV,EAASU,EAASC,KAAKC,SACvBC,QAAQC,IAAIJ,EAASC,KAAKC,SAVZ,yBAYdd,GAAa,GAZC,6EAAH,qDAgBfQ,GACD,GAAE,CAACH,IACJ,IAAMY,EAAWpB,EAAYqB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OAC/B,2BACE,wBAAKD,KACL,uBAAIC,MAFGF,EADsB,IAOjC,OACE,gCACGpB,IAAa,SAAC,IAAD,IACbE,IAAS,yEACTE,IAAa,iFACZA,IAAa,wBAAKc,MAGzB,C,8CC/BD,IAde,WACb,OACE,SAAC,KAAD,CACEK,OAAQ,CAAC,UAAW,UAAW,WAC/BC,aAAc,CACZC,SAAU,QACVC,IAAK,MACLC,KAAM,MACNC,UAAW,0BAIlB,C,wLCZKC,E,QAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAiB,mCAAG,WAAMC,GAAN,yFACRN,EAASO,IAAI,qBAAsB,CACxDJ,OAAQ,CACNG,KAAAA,KAH2B,uBACvBrB,EADuB,EACvBA,KADuB,kBAMxBA,GANwB,2CAAH,sDASjBuB,EAAY,mCAAG,WAAMjB,GAAN,yFACHS,EAASO,IAAT,iBAAuBhB,GAAM,CAAC,GAD3B,uBAClBN,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZwB,EAAkB,mCAAG,WAAMlB,GAAN,yFACTS,EAASO,IAAT,iBAAuBhB,EAAvB,aADS,uBACxBN,EADwB,EACxBA,KADwB,kBAEzBA,GAFyB,2CAAH,sDAKlBJ,EAAqB,mCAAG,WAAMU,GAAN,yFACZS,EAASO,IAAT,iBAAuBhB,EAAvB,aADY,uBAC3BN,EAD2B,EAC3BA,KAD2B,kBAE5BA,GAF4B,2CAAH,sDAKrByB,EAAc,mCAAG,WAAOC,EAAOL,GAAd,yFACLN,EAASO,IAAT,iBAA+B,CACpDJ,OAAQ,CACNQ,MAAAA,EACAL,KAAAA,KAJwB,uBACpBrB,EADoB,EACpBA,KADoB,kBAOrBA,GAPqB,2CAAH,uD","sources":["pages/SingleMovieReviewPage/SingleMovieReviewPage.jsx","shared/Loader/Loader.jsx","shared/services/movies-api.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport Loader from 'shared/Loader/Loader';\nimport { getMovieByNameReviews } from 'shared/services/movies-api';\n\nconst SingleMovieReviewPage = () => {\n  const [reviewMovie, setReview] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [noResults, setNoResults] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        setIsLoading(true);\n        const { results } = await getMovieByNameReviews(movieId);\n        if (!results.length) {\n          setNoResults(true);\n        }\n        setReview(results);\n      } catch ({ response }) {\n        setError(response.data.message);\n        console.log(response.data.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchCast();\n  }, [movieId]);\n  const elements = reviewMovie.map(({ id, author, content }) => (\n    <li key={id}>\n      <h1>{author}</h1>\n      <p>{content}</p>\n    </li>\n  ));\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <p>Oops. Something goes wrong. Please try again.</p>}\n      {noResults && <p>There is no information about review for this movie.</p>}\n      {!noResults && <ul>{elements}</ul>}\n    </>\n  );\n};\n\nexport default SingleMovieReviewPage;\n","import { RotatingTriangles } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <RotatingTriangles\n      colors={['#51E5FF', '#7DE2D1', '#FF7E6B']}\n      wrapperStyle={{\n        position: 'fixed',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n      }}\n    />\n  );\n};\n\nexport default Loader;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'e6316174af6222f390b70a86dd33c4fc',\n  },\n});\n\nexport const getTrendingMovies = async page => {\n  const { data } = await instance.get('/trending/all/week', {\n    params: {\n      page,\n    },\n  });\n  return data;\n};\n\nexport const getMovieById = async id => {\n  const { data } = await instance.get(`/movie/${id}`, {});\n  return data;\n};\n\nexport const getMovieByNameCast = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  return data;\n};\n\nexport const getMovieByNameReviews = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data;\n};\n\nexport const getMovieByName = async (query, page) => {\n  const { data } = await instance.get(`/search/movie?`, {\n    params: {\n      query,\n      page,\n    },\n  });\n  return data;\n};\n"],"names":["useState","reviewMovie","setReview","isLoading","setIsLoading","error","setError","noResults","setNoResults","movieId","useParams","useEffect","fetchCast","getMovieByNameReviews","results","length","response","data","message","console","log","elements","map","id","author","content","colors","wrapperStyle","position","top","left","transform","instance","axios","baseURL","params","api_key","getTrendingMovies","page","get","getMovieById","getMovieByNameCast","getMovieByName","query"],"sourceRoot":""}